import json
import random
import logging
import schedule
import asyncio
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from flask import Flask
import threading
load_dotenv()
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -123456789  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—è—Ç–∞
def get_random_ayat():
    try:
        with open("ayats.json", "r", encoding="utf-8") as file:
            ayats = json.load(file)
            if not ayats:
                raise ValueError("–§–∞–π–ª ayats.json –ø—É—Å—Ç")
            return random.choice(ayats)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª ayats.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"reference": "–û—à–∏–±–∫–∞", "text": "–§–∞–π–ª —Å –∞—è—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ ayats.json")
        return {"reference": "–û—à–∏–±–∫–∞", "text": "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞"}
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ayats.json: {e}")
        return {"reference": "–û—à–∏–±–∫–∞", "text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É—Ö! "
        "–Ø –ë–∞—Å–∏—Ä ‚Äî –≤–∞—à —Å–ø—É—Ç–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥—É—Ö–æ–≤–Ω–æ–º—É —Å–≤–µ—Ç—É. "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 —è –±—É–¥—É –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∞–º –∞—è—Ç—ã –∏–∑ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ö–æ—Ä–∞–Ω–∞, "
        "—á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –º–∏–ª–æ—Å—Ç–∏ –ê–ª–ª–∞—Ö–∞ –∏ —É–∫—Ä–µ–ø–ª—è—Ç—å –≤–∞—à—É –≤–µ—Ä—É."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")

@dp.message(Command("test"))
async def test_ayat_handler(message: types.Message):
    ayat = get_random_ayat()
    text = f"üìñ *{ayat['reference']}*\n\n_{ayat['text']}_"
    await message.answer(text, parse_mode="Markdown")
    logging.info("–¢–µ—Å—Ç–æ–≤—ã–π –∞—è—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

@dp.message(Command("ayat"))
async def ayat_handler(message: types.Message):
    ayat = get_random_ayat()
    text = f"üìñ *{ayat['reference']}*\n\n_{ayat['text']}_"
    await message.answer(text, parse_mode="Markdown")
    logging.info("–ê—è—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /ayat")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞—è—Ç–∞
async def send_daily_ayat():
    ayat = get_random_ayat()
    text = f"üìñ *{ayat['reference']}*\n\n_{ayat['text']}_"
    try:
        await bot.send_message(GROUP_ID, text, parse_mode="Markdown")
        logging.info(f"–ê—è—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—è—Ç–∞: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
def run_scheduler():
    schedule.every().day.at("06:30").do(lambda: asyncio.create_task(send_daily_ayat()))  # 12:30 –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É
    schedule.every().day.at("12:00").do(lambda: asyncio.create_task(send_daily_ayat()))  # 18:00 –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def scheduler():
    run_scheduler()
    while True:
        schedule.run_pending()
        await asyncio.sleep(60)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=5000)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(scheduler())
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    asyncio.run(main())
