import json
import random
import logging
import asyncio
import os
import aioschedule as schedule
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from flask import Flask
import threading
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -123456789  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=TOKEN)
dp = Dispatcher()

def get_random_ayat():
    try:
        with open("ayats.json", "r", encoding="utf-8") as file:
            ayats = json.load(file)
            return random.choice(ayats)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ayats.json: {e}")
        return {"reference": "–û—à–∏–±–∫–∞", "text": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—è—Ç"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É—Ö! "
        "–Ø –ë–∞—Å–∏—Ä ‚Äî –≤–∞—à —Å–ø—É—Ç–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥—É—Ö–æ–≤–Ω–æ–º—É —Å–≤–µ—Ç—É. "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 —è –±—É–¥—É –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∞–º –∞—è—Ç—ã –∏–∑ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ö–æ—Ä–∞–Ω–∞, "
        "—á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –º–∏–ª–æ—Å—Ç–∏ –ê–ª–ª–∞—Ö–∞ –∏ —É–∫—Ä–µ–ø–ª—è—Ç—å –≤–∞—à—É –≤–µ—Ä—É."
    )

@dp.message(Command("ayat"))
async def ayat_handler(message: types.Message):
    ayat = get_random_ayat()
    text = f"üìñ *{ayat['reference']}*\n\n_{ayat['text']}_"
    await message.answer(text, parse_mode="Markdown")

async def send_daily_ayat():
    ayat = get_random_ayat()
    text = f"üìñ *{ayat['reference']}*\n\n_{ayat['text']}_"
    try:
        await bot.send_message(GROUP_ID, text, parse_mode="Markdown")
        logging.info(f"–ê—è—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {GROUP_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—è—Ç–∞: {e}")

async def scheduler():
    schedule.every().day.at("06:30").do(send_daily_ayat)
    schedule.every().day.at("12:00").do(send_daily_ayat)
    while True:
        await schedule.run_pending()
        await asyncio.sleep(60)

app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=5000)

async def main():
    threading.Thread(target=run_flask, daemon=True).start()
    asyncio.create_task(scheduler())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    asyncio.run(main())
